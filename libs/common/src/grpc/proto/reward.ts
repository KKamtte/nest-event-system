// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: proto/reward.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "reward";

export interface CreateRewardRequest {
  eventId: string;
  name: string;
  type: string;
  quantity: number;
}

export interface CreateRewardResponse {
  eventId: string;
  name: string;
  type: string;
  quantity: number;
}

export interface GetRewardRequest {
}

export interface RewardListResponse {
  rewards: RewardResponse[];
}

export interface RewardResponse {
  id: string;
  eventId: string;
  name: string;
  type: string;
  quantity: number;
  createdAt: string;
}

export interface GetRewardByIdRequest {
  rewardId: string;
}

export interface GetRewardByIdResponse {
  id: string;
  eventId: string;
  name: string;
  type: string;
  quantity: number;
  createdAt: string;
}

export const REWARD_PACKAGE_NAME = "reward";

export interface RewardServiceClient {
  createReward(request: CreateRewardRequest): Observable<CreateRewardResponse>;

  getRewards(request: GetRewardRequest): Observable<RewardListResponse>;

  getRewardById(request: GetRewardByIdRequest): Observable<GetRewardByIdResponse>;
}

export interface RewardServiceController {
  createReward(
    request: CreateRewardRequest,
  ): Promise<CreateRewardResponse> | Observable<CreateRewardResponse> | CreateRewardResponse;

  getRewards(
    request: GetRewardRequest,
  ): Promise<RewardListResponse> | Observable<RewardListResponse> | RewardListResponse;

  getRewardById(
    request: GetRewardByIdRequest,
  ): Promise<GetRewardByIdResponse> | Observable<GetRewardByIdResponse> | GetRewardByIdResponse;
}

export function RewardServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createReward", "getRewards", "getRewardById"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RewardService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RewardService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const REWARD_SERVICE_NAME = "RewardService";
