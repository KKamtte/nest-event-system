// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface JoinRequest {
  email: string;
  password: string;
}

export interface JoinResponse {
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface LoginResponse {
  accessToken: string;
  refreshToken: string;
}

export interface UpdateRoleRequest {
  userId: string;
  role: string;
}

export interface UpdateRoleResponse {
}

export interface GetMeRequest {
  /** JWT 토큰 전달 */
  token: string;
}

export interface GetMeResponse {
  id: string;
  email: string;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  join(request: JoinRequest): Observable<JoinResponse>;

  login(request: LoginRequest): Observable<LoginResponse>;

  updateRole(request: UpdateRoleRequest): Observable<UpdateRoleResponse>;

  getMe(request: GetMeRequest): Observable<GetMeResponse>;
}

export interface AuthServiceController {
  join(request: JoinRequest): Promise<JoinResponse> | Observable<JoinResponse> | JoinResponse;

  login(request: LoginRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  updateRole(
    request: UpdateRoleRequest,
  ): Promise<UpdateRoleResponse> | Observable<UpdateRoleResponse> | UpdateRoleResponse;

  getMe(request: GetMeRequest): Promise<GetMeResponse> | Observable<GetMeResponse> | GetMeResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["join", "login", "updateRole", "getMe"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
